name: Test debug

on:
  workflow_dispatch:
  pull_request:
    branches:
      - '*'

env:
  BUILD_DIR: "cmake-build-debug"
  TEST_TARGET: "sorting-on-tape-test-runnable"
  VALGRIND_OUT: "valgrind-sorting-on-tape-test-runnable"

jobs:
  vars:
    runs-on: ubuntu-latest
    outputs:
      build_dir: ${{ env.BUILD_DIR }}
    steps:
      - run: echo "Exposing env vars"

  build-debug:
    uses: stolex1y/sorting-on-tape/.github/workflows/build.yml@master
    needs: vars
    with:
      build_type: "Debug"
      build_dir: ${{ needs.vars.outputs.build_dir }}

  test-debug:
    runs-on: ubuntu-latest
    needs: [ vars, build-debug ]
    steps:
      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.vars.outputs.build_dir }}
          path: .

      - name: Extract build archive
        run: |
          tar -xzf "$BUILD_DIR.tar.gz"
          sudo chmod -R 755 $BUILD_DIR

      - name: Test
        run: |
          cd $BUILD_DIR
          ctest --timeout 10 --output-on-failure --schedule-random -j 2

      - name: Upload build logs if failed
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: Test debug build
          path: ${{ needs.vars.outputs.build_dir }}/test

  valgrind:
    runs-on: ubuntu-latest
    needs: [ vars, build-debug ]
    steps:
      - name: Apt update
        run: sudo apt update

      - name: Install valgrind
        run: sudo apt install -y valgrind

      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.vars.outputs.build_dir }}
          path: .

      - name: Extract build archive
        run: |
          tar -xzf "$BUILD_DIR.tar.gz"
          sudo chmod -R 755 $BUILD_DIR

      - name: Valgrind
        run: |
          cd $BUILD_DIR
          ABS_BUILD_DIR=`pwd`
          cd test/unit/sorting_on_tape
          $ABS_BUILD_DIR/_deps/memcheck-cover-src/bin/memcheck_runner.sh \
            -o $ABS_BUILD_DIR/$VALGRIND_OUT/report -- $ABS_BUILD_DIR/test/unit/sorting_on_tape/$TEST_TARGET \
            && $ABS_BUILD_DIR/_deps/memcheck-cover-src/bin/generate_html_report.sh -i $ABS_BUILD_DIR/$VALGRIND_OUT \
            -o $ABS_BUILD_DIR/$VALGRIND_OUT

      - name: Upload valgrind report if failed
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: Valgrind report
          path: ${{ needs.vars.outputs.build_dir }}/valgrind-*
